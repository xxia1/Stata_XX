* This code produces all kinds of exhibits.

clear all // This clears all local macro names, loaded ados, and datasets in the existing session. 
cd "/Users/xuyangxia/Library/CloudStorage/Dropbox/XX/Stata_XX/Codes" // Here is how to set your working directory. Usually it's recommanded to use relative paths, i.e., assuming the working path is where the current code script locates, and then refer to everything starting there. I will use relative paths in all the codes, here just demonstrates how to set this. 
global datapath = "../Data" 
global outputpath = "/Users/xuyangxia/Library/CloudStorage/Dropbox/Apps/Overleaf/Stata XX/Output" // Point this to where your LaTex script reads files from. 
set seed 99 // Set random seed, in case your program requires generating some random numbers
sysdir set OLDPLACE "tools/customized_ado" // Redirect a package path to the customized folder
global TEXTFILE = "$outputpath/Tables/tex_nums.tex" // Set the latex file for saving numbers generated by latexnum_v2.ado

sysuse census, clear // Again, we use a demo dataset that comes with Stata 

**# Some cleaning 
foreach var of varlist pop* death{
	local vlabel : variable label `var' // Extract the variable's label into a local name 
	
	gen `var'_share = `var'/pop*100
	la var `var'_share "`vlabel' (\%)" // Assign the new variable a label, which we will use in the latex table, so we have to escape % using \
}
drop pop_share // This is just 100% 
la var death_share "Death Rate (\%)"

decode region, gen(region_str) // convert the categorical variable "region" into a string variable by its label, and save it in a new variable called "region_str"
replace region_str = "Northeast" if region_str=="NE"
replace region_str = "North Central" if region_str=="N Cntrl"

**# Save numbers into LaTex commands using latexnum_v2
unique state
latexnum_v2 using "${TEXTFILE}", ///
	macro(UniqueState) /* This is the name of the latex command you want to use. It cannot contain numbers or symbols. */ ///
	value(`r(unique)') /* The value you want save */ ///
	format(%10.0f) /* The format to use */ ///
	desc("Unique number of states.") /* The description of the value, which will be saved in the latex output file as comments. */
	
su pop, de 
latexnum_v2 using "${TEXTFILE}", ///
	macro(TotPop) ///
	value(`r(sum)') ///
	format(%20.0fc) ///
	desc("Unique number of states.") 
	
**# Summary tables. 
* A simple way, with variables on rows, stats on columns.
eststo clear
eststo tb_2016: estpost tabstat *share, s(N Mean SD p50 p75 p90 p99) c(s)
esttab tb_2016 using "$outputpath/Tables/tb_summary_1.tex", replace ///
		cells("count(fmt(%12.0fc)) mean(fmt(%12.2fc)) sd(fmt(%12.2fc)) p50(fmt(%12.2fc)) p75(fmt(%12.2fc)) p90(fmt(%12.2fc)) p99(fmt(%12.2fc)) ") ///
		nonum label noobs 
		
* A flexible way usign texdoc 
texdoc init "$outputpath/Tables/tb_summary_2.tex", replace force // Initialize the Tex file
	
	// Whenever the line starts with "tex", it writes whatever follows directly into the Tex file. 
	tex \begin{tabular}{p{10em}cccccccc}
	tex \toprule
	tex & \multicolumn{2}{c}{Northeast} & \multicolumn{2}{c}{North Central} & \multicolumn{2}{c}{South} & \multicolumn{2}{c}{West} \\
	tex \cmidrule(l{3pt}r{3pt}){2-3} \cmidrule(l{3pt}r{3pt}){4-5} \cmidrule(l{3pt}r{3pt}){6-7} \cmidrule(l{3pt}r{3pt}){8-9}
	tex Total Population 
	
	forval i = 1/4{
		qui su pop if region==`i', de 
		local tmp = trim("`: di %20.0fc `r(sum)''") // `: di ...' returns exactly what it'd be displayed. Stuff I did here is just to make sure the number is in the proper format and doesn't have spaces on the ends. 
		tex & \multicolumn{2}{c}{`tmp'}
	}
	tex \\ 
	tex \cmidrule(l{3pt}r{3pt}){2-3} \cmidrule(l{3pt}r{3pt}){4-5} \cmidrule(l{3pt}r{3pt}){6-7} \cmidrule(l{3pt}r{3pt}){8-9}
	
	tex & Mean & Median (IQR) & Mean & Median (IQR) & Mean & Median (IQR) & Mean & Median (IQR) \\
	tex \midrule

	* Population share by age 
	tex \addlinespace[0.3em]
	tex \multicolumn{1}{c}{\textit{Population Share by Age}} &&&&&&&& \\
	
	foreach var of varlist poplt5_share pop5_17_share pop18p_share pop65p_share{
		local vlabel : variable label `var'
		tex `vlabel'
		forval i = 1/4{
			qui su `var' if region==`i', de 
			local tmpmean = trim("`: di %20.1fc `r(mean)''")
			local tmp50 = trim("`: di %20.1fc `r(p50)''")  
			local tmp25 = trim("`: di %20.1fc `r(p25)''")  
			local tmp75 = trim("`: di %20.1fc `r(p75)''")  
			tex & `tmpmean'&`tmp50' (`tmp25',`tmp75')
		}
		tex \\
	}
	* Other
	tex \addlinespace[0.3em]
	tex \multicolumn{1}{c}{\textit{Others}} &&&&&&&& \\
	
	foreach var of varlist popurban_share death_share{
		local vlabel : variable label `var'
		tex `vlabel'
		forval i = 1/4{
			qui su `var' if region==`i', de 
			local tmpmean = trim("`: di %20.1fc `r(mean)''")
			local tmp50 = trim("`: di %20.1fc `r(p50)''")  
			local tmp25 = trim("`: di %20.1fc `r(p25)''")  
			local tmp75 = trim("`: di %20.1fc `r(p75)''")  
			tex & `tmpmean'&`tmp50'(`tmp25',`tmp75')
		}
		tex \\
	}

	tex \bottomrule
	tex \end{tabular}
texdoc close

**# Map 
rename state state_full
rename state2 state
maptile pop65p_share, geo(state)
graph export "$outputpath/Figures/map1.png", replace 

maptile pop65p_share, geo(statehex)
graph export "$outputpath/Figures/map2.png", replace 

**# Scatter plot
twoway (scatter pop65p_share popurban_share if region_str=="Northeast", m(O) msize(medium) mc(blue%70) mlw(none)) ///
	   (scatter pop65p_share popurban_share if region_str=="North Central", m(D) msize(medium) mc(pink%70) mlw(none) ) ///
	   (scatter pop65p_share popurban_share if region_str=="South", m(S) msize(medium) mc(orange%80) mlw(none) ) ///
	   (scatter pop65p_share popurban_share if region_str=="West", m(T) msize(medium) mc(green%80) mlw(none) )  ///
	   (scatter pop65p_share popurban_share if inlist(state,"AK","FL","VT","NJ","WV","CA","NC","IL","MA"), ///
				m(none) msize(medium) mlw(none) mlabel(state) mlabc(gray) mlabsize(medium)) ///
		, ///
		xtitle("Urban Population Share (%)") ytitle(">65 yo Population Share (%)") ///
		legend(order(1 "Northeast" 2 "North Central" 3 "South" 4 "West") col(1) ring(0) pos(7) region(style(none)))
graph export "$outputpath/Figures/scatter1.png", replace 
// Instead of plot each region separately, you can also plot all states, and specify the option "colorvar(region)", but that has limited degree of customization. See below. 

twoway (scatter pop65p_share popurban_share [w=pop], m(Oh) mlc(blue%70) ///
				colorvar(region) colordiscrete colorrule(phue) coloruseplegend ///
				plegend(order(1 "Northeast" 2 "North Central" 3 "South" 4 "West") col(1) ring(0) pos(7) region(style(none)))) ///
	   (scatter pop65p_share popurban_share if inlist(state,"AK","FL","VT","NJ","WV","CA","NC","IL","MA"), ///
				m(none) msize(medium) mlw(none) mlabel(state) mlabc(gray) legend(off)) ///
		, ///
		xtitle("Urban Population Share (%)") ytitle(">65 yo Population Share (%)") 
graph export "$outputpath/Figures/scatter2.png", replace 

**# Panel Data
webuse nlswork, clear
xtset idcode year, yearly
xtdes
gen wage = exp(ln_wage) 

preserve 
	collapse (mean) hours wage wks_ue, by(year)
	replace year = year + 1900
	twoway (line hours year, lc(blue%70) yaxis(1)) ///
		   (line wage year, lc(pink%70) lp(dash_dot) yaxis(2)) ///
		   (line wks_ue year, lc(orange%70) lp(longdash) yaxis(3)) ///
		   , ///
		   xtitle("Year") xlabel(1968(5)1988) ///
		   yscale(lc(blue) axis(1)) ///
		   yscale(lc(pink) lp(dash_dot) axis(2) alt) ///
		   yscale(lc(orange) lp(longdash) axis(3) alt) ///
		   ylabel(,axis(1) labcolor(blue) tlc(blue) nogrid) ///
		   ylabel(,axis(2) labcolor(pink) tlc(pink) angle(45)) ///
		   ylabel(,axis(3) labcolor(orange) tlc(orange) angle(90)) ///
		   ytitle("Hours", axis(1) color(blue)) ///
		   ytitle("Wage", axis(2) color(pink)) ///
		   ytitle("Weeks Unemployed", axis(3) color(orange)) ///
		   legend(off) graphregion(color(white) lstyle(none)) aspect(0.5)
	graph export "$outputpath/Figures/line.png", replace 
restore 

**# Regression Table
* Label some variables. 
la var age "Age"
la var msp "Married"
la var c_city "In City"
la var south "In South"
la var union "In Union"

eststo clear 
eststo: reg ln_wage union, cluster(idcode)
eststo: reg ln_wage union msp age c_city south, cluster(idcode)
eststo: reghdfe ln_wage union msp age c_city south, abs(year) cluster(idcode)
eststo: reghdfe ln_wage union msp age c_city south, abs(year idcode) cluster(idcode)
eststo: reghdfe ln_wage union msp age c_city south i.ind_code, abs(year idcode) cluster(idcode)

//You can also give each specification a name, e.g., "eststo spec1: reg...". If you don't specify names, they are named est1, est2, ... by the order they are run. 

estadd ysumm: est* // Calculate some summary stats of the dependent variable. 
estadd local yfe "Yes": est3 est4 est5
estadd local ife "Yes": est4 est5

esttab est* ///
    using "$outputpath/Tables/regs.tex",replace ///
	se(%10.4f) star(* 0.1 ** 0.05 *** 0.01) label  ///
	stats(N ymean yfe ife, labels("Observations" "Dep Var Mean" "Year FE" "Individual FE") fmt(%10.0gc %10.1f)) ///
	refcat(union "\emph{Controls}", below nolabel) ///
	indicate("Occupation FE= *.ind_code", labels("Yes" "")) ///
	nomti ///
	mgroups("Without Fixed Effects" "With Fixed Effects", pattern(1 0 1 0 0) prefix(\multicolumn{@span}{c}{) suffix(}) span erepeat(\cmidrule(lr){@span})) 
	
**# Event Study with xtevent 
* For the purpose of illustration, we keep observations that were surveyed for at least ten years, and fill in missing values for some key variables --- this may not be the correct thing to do in a real analysis.  
bys idcode (year): egen num_year = count(year)
su num_year, de
keep if num_year>=10
xtset idcode year, yearly 
tsfill, full // Balance the panel so each id has an observation for every year. 
sort idcode year 
by idcode: carryforward ln_wage union, replace // Replace missing by the most recent nonmissing before this year. 
gsort idcode -year // gsort is sort on steroid, which allows you to sort things in ascending order. 
by idcode: carryforward ln_wage union, replace // Replace missing by the most recent nonmissing after this year. 

* Again, just for the purpose of illustration, I convert the union variable into an absorbing treatment, i.e., once it's in a union, it's in a union ever after. 
bys idcode (year): gen treat = sum(union)>0

xtset, clear // In xtevent, if you already xtset the panel and time variable beforehand, it will automatically use these two variables as the panel and time identifiers and you don't have to specify panelvar() and timevar(). If you already xtset the data, but specify panelvar() and timevar() differently, there may be a strange error. Here I just clear the xtset and specify panel and time variables directly in xtevent. 

xtevent ln_wage, policyvar(treat) panelvar(idcode) timevar(year) window(5) cluster(idcode)
xteventplot
graph export "$outputpath/Figures/xtevent1.png", replace 

xtevent ln_wage, policyvar(treat) panelvar(idcode) timevar(year) window(5) sunab  cluster(idcode)
xteventplot
graph export "$outputpath/Figures/xtevent2.png", replace 








































